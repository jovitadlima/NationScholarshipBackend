// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(ScholarshipDbContext))]
    [Migration("20220829033542_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Backend.Models.Institute", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddressPincode")
                        .HasColumnType("int");

                    b.Property<string>("AddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffliatedUniversityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffliatedUniversityState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ApprovedByMinistry")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("DiseCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PrincipalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfAddmission")
                        .HasColumnType("int");

                    b.HasKey("InstituteId");

                    b.HasIndex("DiseCode", "InstituteCode")
                        .IsUnique()
                        .HasFilter("[DiseCode] IS NOT NULL AND [InstituteCode] IS NOT NULL");

                    b.ToTable("Institutes");
                });

            modelBuilder.Entity("Backend.Models.InstituteDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InstituteId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("InstituteId");

                    b.ToTable("InstituteDocuments");
                });

            modelBuilder.Entity("Backend.Models.Ministry", b =>
                {
                    b.Property<int>("MinistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MinistryEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("MinistryId");

                    b.ToTable("Ministries");

                    b.HasData(
                        new
                        {
                            MinistryId = 1,
                            MinistryEmail = "ministry@nsp.com",
                            Name = "Ministry",
                            PasswordHash = new byte[] { 130, 16, 99, 84, 111, 254, 136, 23, 139, 157, 53, 247, 17, 126, 19, 58, 194, 230, 233, 56, 218, 141, 79, 36, 231, 16, 96, 188, 157, 35, 192, 147, 149, 81, 83, 193, 130, 195, 20, 193, 88, 224, 64, 166, 149, 56, 17, 220, 149, 204, 202, 97, 55, 176, 120, 232, 85, 113, 65, 8, 167, 199, 106, 28 },
                            PasswordSalt = new byte[] { 116, 156, 222, 38, 110, 137, 76, 88, 233, 45, 118, 230, 239, 204, 155, 120, 44, 167, 171, 44, 119, 194, 109, 220, 12, 138, 221, 100, 180, 245, 241, 6, 180, 32, 124, 57, 145, 95, 199, 201, 78, 43, 203, 180, 150, 166, 17, 120, 140, 207, 150, 222, 55, 116, 223, 114, 86, 133, 44, 171, 60, 152, 13, 31, 5, 35, 167, 215, 32, 195, 79, 158, 35, 167, 84, 79, 118, 22, 150, 191, 76, 118, 123, 30, 113, 23, 78, 63, 159, 13, 100, 81, 93, 40, 149, 251, 193, 162, 99, 31, 150, 137, 173, 57, 149, 8, 252, 240, 94, 203, 46, 168, 68, 133, 147, 169, 137, 207, 209, 107, 177, 93, 164, 29, 125, 193, 167, 72 }
                        });
                });

            modelBuilder.Entity("Backend.Models.NodalOfficer", b =>
                {
                    b.Property<int>("OfficerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OfficerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("OfficerId");

                    b.ToTable("NodalOfficers");

                    b.HasData(
                        new
                        {
                            OfficerId = 1,
                            OfficerEmail = "officer@nsp.com",
                            OfficerName = "Officer",
                            PasswordHash = new byte[] { 188, 97, 234, 172, 24, 171, 225, 41, 188, 216, 143, 224, 235, 55, 182, 49, 189, 82, 75, 65, 226, 154, 209, 66, 26, 76, 216, 70, 97, 7, 73, 207, 61, 116, 32, 132, 232, 71, 87, 95, 61, 234, 51, 19, 11, 26, 124, 159, 176, 199, 17, 245, 209, 133, 25, 127, 145, 206, 197, 209, 49, 114, 10, 62 },
                            PasswordSalt = new byte[] { 196, 85, 173, 121, 50, 94, 72, 121, 157, 196, 171, 213, 20, 59, 213, 73, 189, 62, 234, 2, 75, 226, 35, 200, 87, 249, 92, 90, 117, 161, 65, 113, 11, 32, 86, 125, 119, 249, 193, 183, 11, 80, 214, 6, 10, 82, 187, 166, 153, 48, 115, 96, 240, 194, 186, 163, 212, 17, 220, 102, 95, 142, 227, 2, 210, 121, 234, 44, 230, 177, 101, 88, 5, 199, 170, 195, 76, 127, 33, 49, 95, 201, 200, 204, 217, 141, 237, 195, 11, 231, 171, 220, 150, 51, 230, 249, 149, 221, 112, 250, 136, 150, 203, 124, 157, 118, 5, 87, 4, 248, 193, 226, 3, 17, 13, 119, 245, 137, 55, 81, 157, 106, 253, 81, 87, 66, 226, 143 }
                        });
                });

            modelBuilder.Entity("Backend.Models.ScholarshipApplication", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AddmissionFee")
                        .HasColumnType("int");

                    b.Property<int>("AnnualIncome")
                        .HasColumnType("int");

                    b.Property<bool>("ApprovedByInstitute")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByMinistry")
                        .HasColumnType("bit");

                    b.Property<bool>("ApprovedByOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardName10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BoardName12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ClassStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Community")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("MartialStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModeOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OtherFee")
                        .HasColumnType("int");

                    b.Property<string>("ParentProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassingYear10")
                        .HasColumnType("int");

                    b.Property<int>("PassingYear12")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage10")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Percentage12")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageDisability")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Pincode")
                        .HasColumnType("int");

                    b.Property<string>("PresentCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PresentCourseYear")
                        .HasColumnType("int");

                    b.Property<decimal>("PreviousClassPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PreviousCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreviousPassingYear")
                        .HasColumnType("int");

                    b.Property<string>("RollNo10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchemeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TutionFee")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfDisability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityBoardName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("SchemeId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("ScholarshipApplications");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipScheme", b =>
                {
                    b.Property<int>("SchemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchemeId");

                    b.ToTable("ScholarshipSchemes");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankIfscCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstituteCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InstituteId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StateOfDomicile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.HasIndex("InstituteId");

                    b.HasIndex("AadharNumber", "PhoneNo", "BankAccountNumber")
                        .IsUnique()
                        .HasFilter("[AadharNumber] IS NOT NULL AND [PhoneNo] IS NOT NULL AND [BankAccountNumber] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Backend.Models.StudentDocument", b =>
                {
                    b.Property<int>("DocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScholarshipApplicationApplicationId")
                        .HasColumnType("int");

                    b.HasKey("DocId");

                    b.HasIndex("ScholarshipApplicationApplicationId");

                    b.ToTable("StudentDocuments");
                });

            modelBuilder.Entity("Backend.Models.InstituteDocument", b =>
                {
                    b.HasOne("Backend.Models.Institute", "Institute")
                        .WithMany("InstituteDocument")
                        .HasForeignKey("InstituteId");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipApplication", b =>
                {
                    b.HasOne("Backend.Models.ScholarshipScheme", "ScholarshipScheme")
                        .WithMany("ScholarshipApplication")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Models.Student", "Student")
                        .WithOne("ScholarshipApplication")
                        .HasForeignKey("Backend.Models.ScholarshipApplication", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScholarshipScheme");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.HasOne("Backend.Models.Institute", "Institute")
                        .WithMany("Student")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("Backend.Models.StudentDocument", b =>
                {
                    b.HasOne("Backend.Models.ScholarshipApplication", "ScholarshipApplication")
                        .WithMany("StudentDocument")
                        .HasForeignKey("ScholarshipApplicationApplicationId");

                    b.Navigation("ScholarshipApplication");
                });

            modelBuilder.Entity("Backend.Models.Institute", b =>
                {
                    b.Navigation("InstituteDocument");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipApplication", b =>
                {
                    b.Navigation("StudentDocument");
                });

            modelBuilder.Entity("Backend.Models.ScholarshipScheme", b =>
                {
                    b.Navigation("ScholarshipApplication");
                });

            modelBuilder.Entity("Backend.Models.Student", b =>
                {
                    b.Navigation("ScholarshipApplication");
                });
#pragma warning restore 612, 618
        }
    }
}
